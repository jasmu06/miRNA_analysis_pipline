R.version
R.version
install.packages(c("ggplot2", "pheatmap", "tidyverse", "dplyr", "reshape2"))
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
BiocManager::install(c("DESeq2", "edgeR", "limma"))
install.packages("fastqcr")  # For FASTQ quality control
BiocManager::install("org.Hs.eg.db")  # Human gene annotation#
BiocManager::install("miRBaseConverter")  # miRNA annotation
install.packages("ggpubr")  # Enhanced ggplot2 visualizations#
install.packages("ComplexHeatmap")  # Advanced heatmaps
library(ggplot2)#
library(pheatmap)#
library(tidyverse)#
library(DESeq2)#
library(edgeR)#
library(limma)#
library(fastqcr)#
library(org.Hs.eg.db)#
library(miRBaseConverter)#
library(ggpubr)#
library(ComplexHeatmap)
# Install BiocManager if not already installed#
if (!require("BiocManager", quietly = TRUE))#
    install.packages("BiocManager")#
#
# Install ComplexHeatmap#
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
pheatmap::heatmap(data)
ComplexHeatmap::Heatmap(data)
# Load libraries#
library(pheatmap)#
library(ComplexHeatmap)#
#
# Example data#
data <- matrix(rnorm(100), nrow=10, ncol=10)#
#
# Use pheatmap#
pheatmap::pheatmap(data, scale="row")#
#
# Use ComplexHeatmap#
ComplexHeatmap::Heatmap(data, name="Expression")
# Load count matrix#
count_matrix <- read.table("results/count/count_matrix.txt", header=TRUE, row.names=1)#
#
# Load metadata#
metadata <- read.csv("data/meta_csv/metadata.csv", header=TRUE, row.names=1)
# Create DESeqDataSet#
dds <- DESeqDataSetFromMatrix(countData = count_matrix,#
                              colData = metadata,#
                              design = ~ condition)#
#
# Run DESeq2#
dds <- DESeq(dds)#
#
# Extract results#
results <- results(dds)#
#
# Save results#
write.table(results, file="results/deseq2/diffexp_results.txt", sep="\t", quote=FALSE)
# Volcano plot#
ggplot(as.data.frame(results), aes(x=log2FoldChange, y=-log10(pvalue))) +#
  geom_point(aes(color=ifelse(padj < 0.05, "Significant", "Not Significant"))) +#
  theme_minimal() +#
  labs(title="Volcano Plot", x="log2(Fold Change)", y="-log10(p-value)")#
#
# Heatmap#
pheatmap(count_matrix[1:20, ], scale="row", clustering_distance_rows="euclidean", clustering_distance_cols="euclidean")
# Load count matrix#
count_matrix <- read.table("results/count/count_matrix.txt", header=TRUE, row.names=1)#
#
# Load metadata#
metadata <- read.csv("data/meta_csv/metadata.csv", header=TRUE, row.names=1)
getwd()
metadata <- read.csv("/absolute/path/to/data/meta_csv/metadata.csv", header=TRUE, row.names=1)
setwd("/Users/jasmu/tumor_mirna")#
metadata <- read.csv("data/metadata_csv/metadata.csv", header=TRUE, row.names=1)
metadata <- read.csv("metadata.csv", header=TRUE)#
head(metadata)
sample_metadata <- read.csv("metadata.csv", header=TRUE)
metadata_path <- "~/jasmu/tumor_mirna/data/meta_csv/metadata.csv"#
sample_metadata <- read.csv(metadata_path, header = TRUE)
# Load packages#
library(DESeq2)#
library(ggplot2)#
#
# Read data#
counts <- read.table("results/counts/counts.txt", header=TRUE, row.names=1)#
metadata <- read.csv("data/meta_csv/metadata.csv")#
#
# DESeq2 analysis#
dds <- DESeqDataSetFromMatrix(countData = counts,#
                             colData = metadata,#
                             design = ~ condition)#
dds <- DESeq(dds)#
res <- results(dds)#
#
# Save results#
write.csv(res, "results/deseq2/results.csv")#
#
# Volcano plot#
ggplot(as.data.frame(res), aes(x=log2FoldChange, y=-log10(pvalue))) +#
  geom_point(aes(color=padj < 0.05)) +#
  ggtitle("Tumor vs Control")
# Load libraries#
library(DESeq2)#
#
# Read arguments#
args <- commandArgs(trailingOnly = TRUE)#
count_file <- args[1]#
output_file <- args[2]#
#
# Read count matrix#
count_data <- read.table(count_file, header = TRUE, row.names = 1)#
#
# Create metadata#
metadata <- data.frame(#
  condition = factor(c(rep("Tumor", 3), rep("Control", 3))),#
  row.names = colnames(count_data)#
)#
#
# Create DESeq2 object#
dds <- DESeqDataSetFromMatrix(countData = count_data, colData = metadata, design = ~ condition)#
#
# Run DESeq2#
dds <- DESeq(dds)#
#
# Get results#
res <- results(dds, contrast = c("condition", "Tumor", "Control"))#
#
# Save results#
write.csv(res, output_file)
# Load libraries#
library(DESeq2)#
#
# Create a count matrix (rows = miRNAs, columns = samples)#
count_data <- matrix(c(...), nrow=..., ncol=..., byrow=TRUE)#
colnames(count_data) <- c("Tumor1", "Tumor2", "Tumor3", "Control1", "Control2", "Control3")#
rownames(count_data) <- c("miR-1", "miR-2", ...)#
#
# Create a metadata table#
metadata <- data.frame(#
  condition = factor(c("Tumor", "Tumor", "Tumor", "Control", "Control", "Control")),#
  row.names = colnames(count_data)#
)#
#
# Create DESeq2 object#
dds <- DESeqDataSetFromMatrix(countData = count_data, colData = metadata, design = ~ condition)#
#
# Run DESeq2#
dds <- DESeq(dds)#
#
# Get results#
res <- results(dds, contrast = c("condition", "Tumor", "Control"))#
#
# Filter significant results#
res_sig <- subset(res, padj < 0.05 & abs(log2FoldChange) > 1)#
#
# Save results#
write.csv(res_sig, "differential_expression_results.csv")
# Load libraries#
library(DESeq2)#
#
# Read arguments#
args <- commandArgs(trailingOnly = TRUE)#
count_file <- args[1]#
output_file <- args[2]#
#
# Read count matrix#
count_data <- read.table(count_file, header = TRUE, row.names = 1)#
#
# Create metadata#
metadata <- data.frame(#
  condition = factor(c(rep("Tumor", 3), rep("Control", 3))),#
  row.names = colnames(count_data)#
)#
#
# Create DESeq2 object#
dds <- DESeqDataSetFromMatrix(countData = count_data, colData = metadata, design = ~ condition)#
#
# Run DESeq2#
dds <- DESeq(dds)#
#
# Get results#
res <- results(dds, contrast = c("condition", "Tumor", "Control"))#
#
# Save results#
write.csv(res, output_file)
# 1. Load required packages#
library(DESeq2)#
#
# 2. Load your data (REPLACE WITH YOUR ACTUAL PATHS)#
count_data <- read.csv("results/counts/count_matrix.csv", row.names=1)#
metadata <- read.csv("data/meta_csv/metadata.csv", row.names=1)#
#
# 3. Verify data loaded correctly#
print("Count data preview:")#
head(count_data)#
print("Metadata preview:")#
head(metadata)#
#
# 4. Check sample names match#
print("Checking sample name alignment:")#
data.frame(#
  Counts_Samples = colnames(count_data),#
  Metadata_Samples = rownames(metadata)#
)#
#
# 5. Create DESeq2 object#
dds <- DESeqDataSetFromMatrix(#
  countData = count_data,#
  colData = metadata,#
  design = ~ condition#
)#
#
# 6. Run analysis#
dds <- DESeq(dds)#
#
# 7. Get results#
res <- results(dds, contrast = c("condition", "Tumor", "Control"))#
#
# 8. Save results#
write.csv(res, "results/diffexp/t
# 1. FIRST load required packages#
library(DESeq2)#
#
# 2. PROPERLY load your data (update these paths!)#
count_file <- "results/counts/count_matrix.csv"  # UPDATE TO YOUR PATH#
meta_file <- "data/meta_csv/metadata.csv"        # UPDATE TO YOUR PATH#
#
# Check if files exist#
if(!file.exists(count_file)) stop("Count file missing! Check path: ", count_file)#
if(!file.exists(meta_file)) stop("Metadata file missing! Check path: ", meta_file)#
#
# 3. READ the files correctly#
count_data <- as.matrix(read.csv(count_file, row.names=1))  # Must be matrix#
metadata <- read.csv(meta_file, row.names=1)#
#
# 4. VERIFY the data#
cat("\nCount matrix dimensions:", dim(count_data))#
cat("\nMetadata dimensions:", dim(metadata))#
cat("\nFirst 3 samples in counts:", colnames(count_data)[1:3])#
cat("\nFirst 3 samples in metadata:", rownames(metadata)[1:3])#
#
# 5. CREATE DESeq object#
dds <- DESeqDataSetFromMatrix(#
  countData = count_data,#
  colData = metadata,#
  design = ~ condition#
)#
#
# 6. RUN analysis#
dds <- DESeq(dds)#
#
# 7. GET results#
res <- results(dds, contrast=c("condition", "Tumor", "Control"))#
#
# 8. SAVE results#
dir.create("results/diffexp", showWarnings=FALSE)  # Ensure output dir exists#
write.csv(res, "results/diffexp/tumor_vs_control_results.csv")#
#
# 9. CONFIRM success#
cat("\nAnalysis completed! Results saved to results/diffexp/")#
print(head(res))
# Run these checks FIRST#
list.files("results/counts/")  # Should show count_matrix.csv#
list.files("data/meta_csv/")   # Should show metadata.csv#
#
# Check file contents#
readLines("results/counts/count_matrix.csv", n=3)  # First 3 lines#
readLines("data/meta_csv/metadata.csv", n=3)
# Check what files exist in your count directory#
list.files("results/count/")  # Note singular 'count'
# Load from the correct location#
count_data <- as.matrix(read.csv("results/count/count_matrix.csv", row.names=1))#
#
# Or if using featureCounts output:#
count_data <- read.table("results/count/featureCounts_results.txt", #
                        header=TRUE, row.names=1, skip=1)[,-c(1:5)]
# Check what exists in your count directory#
list.files("results/count/", full.names = TRUE)
