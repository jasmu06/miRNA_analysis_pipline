configfile: "config/config.yml"

rule all:
    input:
        expand("results/trimmed/{sample}.fastq.gz", sample=config["samples"]["Tumor"] + config["samples"]["Control"]),
        expand("results/Bowtie2/{sample}_Aligned.sortedByCoord.out.bam", sample=config["samples"]["Tumor"] + config["samples"]["Control"]),
        expand("results/featureCounts/{sample}.counts.txt", sample=config["samples"]["Tumor"] + config["samples"]["Control"])


rule fastqc:
    input:
        "tumor_mirna/data/raw_fastq/{sample}.fastq"
    output:
        html = "tumor_mirna/data/fastqc_reports/{sample}_fastqc.html",
        zip = "tumor_mirna/data/fastqc_reports/{sample}_fastqc.zip"
    shell:
        "fastqc {input} --outdir=tumor_mirna/data/fastqc_reports"

rule trim_reads:
    input:
        "tumor_mirna/data/raw_fastq/{sample}.fastq"
    output:
        "tumor_mirna/data/trimmed_fastq/{sample}_trimmed.fastq"
    params:
        adapter = "TGGAATTCTCGGGTGCCAAGG"  # example: universal miRNA adapter, replace if needed
    shell:
        "cutadapt -a {params.adapter} -o {output} {input}"











rule index_bowtie2:
    input:
        genome="/Users/jasmu/tumor_mirna/references/hsa.fa"
    output:
        index_files=expand("references/bowtie2_index/hsa.{ext}",
                            genome_name="hsa",
                            ext=["1.bt2", "2.bt2", "3.bt2", "4.bt2", "rev.1.bt2", "rev.2.bt2"])
    shell:
        """
        bowtie2-build {input.genome} references/bowtie2_index/hsa
        """

        
# Align reads with Bowtie2
bowtie2 -x references/bowtie2_index/hsa \
    -U results/trimmed/Control2.fastq.gz \
    -S results/Bowtie2/Control2.sam

# Convert SAM to BAM
samtools view -bS results/Bowtie2/Control2.sam > results/Bowtie2/Control2.bam

# Sort BAM
samtools sort results/Bowtie2/Control2.bam -o results/Bowtie2/Control2_Aligned.sortedByCoord.out.bam

# Clean up
rm results/Bowtie2/Control2.sam results/Bowtie2/Control2.bam


        



#rule star_genome_index:
   # input:
     #   reference = config['reference'],
    #    gtf = config['gtf']
   # output:
     #   directory("results/STAR/index")
   # params:
    #    extra = config.get("extra_star_params", "")  # Get extra parameters from the config file
   # shell:
     #   """
    #    mkdir -p {output}
      #  STAR --runThreadN {threads} --runMode genomeGenerate --genomeDir {output} --genomeFastaFiles {input.reference} --sjdbGTFfile {input.gtf} {params.extra}
       # """


rule trim_adapters:
    input:
        "data/raw_fastq/{sample}.fastq.gz"
    output:
        "results/trimmed/{sample}.fastq.gz"
    shell:
        "cutadapt -j 4 -m 20 --quality-cutoff 20 -o {output} {input}"


#GENOME_DIR = "/Users/jasmu/tumor_mirna/results/STAR/index"  # Absolute path

#rule align_reads:
  #  input:
    #    "results/trimmed/{sample}.fastq.gz"
   # output:
       # "results/STAR/{sample}_Aligned.sortedByCoord.out.bam"
   # shell:
       # """
       # STAR --runThreadN 2 \
       # --genomeDir {GENOME_DIR} \
       # --readFilesIn {input} \
       # --outFileNamePrefix results/STAR/{wildcards.sample}_ \
       # --outSAMtype BAM SortedByCoordinate
       # """
     

rule count_features:
    input:
        bam="results/Bowtie2/{sample}_Aligned.sortedByCoord.out.bam"
    output:
        "results/featureCounts/{sample}.counts.txt"
    params:
       annotation = "references/hsa.gtf",
        extra="-g gene_id"
    threads: 4
    shell:
        "featureCounts -T {threads} -a {config[gtf]} -o {output} {params.extra} {input.bam}"

